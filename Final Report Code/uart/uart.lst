
uart.elf:     file format elf32-littlearm
uart.elf
architecture: armv7, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20001035

Program Header:
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x000010f8 memsz 0x000010f8 flags r-x
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  20001000  20001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  20002000  20002000  000010f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  20002000  20002000  00000000  2**0
                  ALLOC
  3 .debug_info   00000295  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 00000114  00000000  00000000  0000138d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000028  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_ranges 00000018  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000000fa  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    000001c8  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      00000033  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY
 10 .ARM.attributes 0000002d  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000038  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
20001000 l    d  .text	00000000 .text
20002000 l    d  .data	00000000 .data
20002000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 uart.c
00000000 g       *ABS*	00000000 __data_size
200010f8 g       .text	00000000 _sidata
200010f8 g       .text	00000000 _etext
20002000 g       .bss	00000000 _sbss
00000000 g       *ABS*	00000000 __bss_size
20002000 g       .data	00000000 _sdata
20002000 g       .bss	00000000 _ebss
20001000 g     O .text	00000008 vector_table
20001034 g     F .text	000000c4 main
000000f8 g       *ABS*	00000000 __text_size
20002000 g       .data	00000000 _edata
20001008 g     F .text	0000002c set_system_clock_to_8Mhz



Disassembly of section .text:

20001000 <vector_table>:
20001000:	00 50 00 20 35 10 00 20                             .P. 5.. 

20001008 <set_system_clock_to_8Mhz>:
*/

void set_system_clock_to_8Mhz(void)
{
	// Enable HSI
	RCC->CR |= 1;
20001008:	4b09      	ldr	r3, [pc, #36]	; (20001030 <set_system_clock_to_8Mhz+0x28>)
2000100a:	681b      	ldr	r3, [r3, #0]
2000100c:	4a08      	ldr	r2, [pc, #32]	; (20001030 <set_system_clock_to_8Mhz+0x28>)
2000100e:	f043 0301 	orr.w	r3, r3, #1
20001012:	6013      	str	r3, [r2, #0]
	// Wait untill HSI settles down
	while (!(RCC->CR & (1 << 1)));
20001014:	bf00      	nop
20001016:	4b06      	ldr	r3, [pc, #24]	; (20001030 <set_system_clock_to_8Mhz+0x28>)
20001018:	681b      	ldr	r3, [r3, #0]
2000101a:	f003 0302 	and.w	r3, r3, #2
2000101e:	2b00      	cmp	r3, #0
20001020:	d0f9      	beq.n	20001016 <set_system_clock_to_8Mhz+0xe>
	
	// Finally, choose HSI as the system clock
	RCC->CFGR |= (0b00 << 0);
20001022:	4b03      	ldr	r3, [pc, #12]	; (20001030 <set_system_clock_to_8Mhz+0x28>)
20001024:	4a02      	ldr	r2, [pc, #8]	; (20001030 <set_system_clock_to_8Mhz+0x28>)
20001026:	685b      	ldr	r3, [r3, #4]
20001028:	6053      	str	r3, [r2, #4]

}
2000102a:	bf00      	nop
2000102c:	4770      	bx	lr
2000102e:	bf00      	nop
20001030:	40021000 	.word	0x40021000

20001034 <main>:

/*************************************************
* Main code starts from here
*************************************************/
int32_t main(void)
{
20001034:	b500      	push	{lr}
20001036:	b087      	sub	sp, #28
	// Copy LMA to VMA for data section
	//copy_data();

	// Set clock to 8 MHz
	set_system_clock_to_8Mhz();
20001038:	f7ff ffe6 	bl	20001008 <set_system_clock_to_8Mhz>
	*/
	
	
	
	// Make GPIOA Pin 9,10 (PA9, PA10) alternate-function output (0b1010)
	GPIOA->CRH &= 0xFFFFF00F;
2000103c:	4b2b      	ldr	r3, [pc, #172]	; (200010ec <main+0xb8>)
2000103e:	685b      	ldr	r3, [r3, #4]
20001040:	4a2a      	ldr	r2, [pc, #168]	; (200010ec <main+0xb8>)
20001042:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
20001046:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000BB0;
20001048:	4b28      	ldr	r3, [pc, #160]	; (200010ec <main+0xb8>)
2000104a:	685b      	ldr	r3, [r3, #4]
2000104c:	4a27      	ldr	r2, [pc, #156]	; (200010ec <main+0xb8>)
2000104e:	f443 633b 	orr.w	r3, r3, #2992	; 0xbb0
20001052:	6053      	str	r3, [r2, #4]
	//USART1->CR2 |= (0b00 << 12);
	// Baud rate
	// BRR should be 52 + 1/12 for 9600 baud rate
	// Thus manista is 52 (0x034) and fraction is 12 (0x1) (1/16)
	// Making it 0x0341
	USART1->BRR = 0x0341;
20001054:	4b26      	ldr	r3, [pc, #152]	; (200010f0 <main+0xbc>)
20001056:	f240 3241 	movw	r2, #833	; 0x341
2000105a:	609a      	str	r2, [r3, #8]
	// Transmitter enable
	//USART1->CR1 |= (1 << 3);
	// Receiver enable
	//USART1->CR1 |= (1 << 2);

	volatile uint32_t *addr = (uint32_t*) 0x08000000; 
2000105c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20001060:	9305      	str	r3, [sp, #20]
	uint32_t value = *addr;
20001062:	9b05      	ldr	r3, [sp, #20]
20001064:	681b      	ldr	r3, [r3, #0]
20001066:	9304      	str	r3, [sp, #16]
	uint8_t value_8bit;
	
	// for some reason, when nrst is pressed, the first byte does not get transmitted
	// therefore, this is a placeholder to make sure that data does not get lost during testing
	// Might remove this later if needed
	value_8bit = (value>>24);
20001068:	9b04      	ldr	r3, [sp, #16]
2000106a:	0e1b      	lsrs	r3, r3, #24
2000106c:	f88d 3007 	strb.w	r3, [sp, #7]
	USART1->DR |= value_8bit;
20001070:	4b1f      	ldr	r3, [pc, #124]	; (200010f0 <main+0xbc>)
20001072:	685a      	ldr	r2, [r3, #4]
20001074:	f89d 3007 	ldrb.w	r3, [sp, #7]
20001078:	491d      	ldr	r1, [pc, #116]	; (200010f0 <main+0xbc>)
2000107a:	4313      	orrs	r3, r2
2000107c:	604b      	str	r3, [r1, #4]
	while(!(USART1->SR & (1 << 6)));
2000107e:	bf00      	nop
20001080:	4b1b      	ldr	r3, [pc, #108]	; (200010f0 <main+0xbc>)
20001082:	681b      	ldr	r3, [r3, #0]
20001084:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001088:	2b00      	cmp	r3, #0
2000108a:	d0f9      	beq.n	20001080 <main+0x4c>
	
	while(1)
	{
		for(int i=1000000; i>0; i--);
2000108c:	4b19      	ldr	r3, [pc, #100]	; (200010f4 <main+0xc0>)
2000108e:	9303      	str	r3, [sp, #12]
20001090:	e002      	b.n	20001098 <main+0x64>
20001092:	9b03      	ldr	r3, [sp, #12]
20001094:	3b01      	subs	r3, #1
20001096:	9303      	str	r3, [sp, #12]
20001098:	9b03      	ldr	r3, [sp, #12]
2000109a:	2b00      	cmp	r3, #0
2000109c:	dcf9      	bgt.n	20001092 <main+0x5e>
		
		for (int i = 4; i > 0; i--){
2000109e:	2304      	movs	r3, #4
200010a0:	9302      	str	r3, [sp, #8]
200010a2:	e018      	b.n	200010d6 <main+0xa2>
			value_8bit = (value >> (8*(i-1)) );
200010a4:	9b02      	ldr	r3, [sp, #8]
200010a6:	3b01      	subs	r3, #1
200010a8:	00db      	lsls	r3, r3, #3
200010aa:	9a04      	ldr	r2, [sp, #16]
200010ac:	fa22 f303 	lsr.w	r3, r2, r3
200010b0:	f88d 3007 	strb.w	r3, [sp, #7]
			USART1->DR |= value_8bit;
200010b4:	4b0e      	ldr	r3, [pc, #56]	; (200010f0 <main+0xbc>)
200010b6:	685a      	ldr	r2, [r3, #4]
200010b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
200010bc:	490c      	ldr	r1, [pc, #48]	; (200010f0 <main+0xbc>)
200010be:	4313      	orrs	r3, r2
200010c0:	604b      	str	r3, [r1, #4]
			while(!(USART1->SR & (1 << 6)));
200010c2:	bf00      	nop
200010c4:	4b0a      	ldr	r3, [pc, #40]	; (200010f0 <main+0xbc>)
200010c6:	681b      	ldr	r3, [r3, #0]
200010c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200010cc:	2b00      	cmp	r3, #0
200010ce:	d0f9      	beq.n	200010c4 <main+0x90>
		for (int i = 4; i > 0; i--){
200010d0:	9b02      	ldr	r3, [sp, #8]
200010d2:	3b01      	subs	r3, #1
200010d4:	9302      	str	r3, [sp, #8]
200010d6:	9b02      	ldr	r3, [sp, #8]
200010d8:	2b00      	cmp	r3, #0
200010da:	dce3      	bgt.n	200010a4 <main+0x70>
		}
		
		addr = addr + 1;
200010dc:	9b05      	ldr	r3, [sp, #20]
200010de:	3304      	adds	r3, #4
200010e0:	9305      	str	r3, [sp, #20]
		value = *addr;
200010e2:	9b05      	ldr	r3, [sp, #20]
200010e4:	681b      	ldr	r3, [r3, #0]
200010e6:	9304      	str	r3, [sp, #16]
		for(int i=1000000; i>0; i--);
200010e8:	e7d0      	b.n	2000108c <main+0x58>
200010ea:	bf00      	nop
200010ec:	40010800 	.word	0x40010800
200010f0:	40013800 	.word	0x40013800
200010f4:	000f4240 	.word	0x000f4240
