
uart.elf:     file format elf32-littlearm
uart.elf
architecture: armv7, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001d9

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00000300 memsz 0x00000300 flags r-x
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  3 .debug_info   000006f0  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 000001aa  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000050  00000000  00000000  00010b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_ranges 00000040  00000000  00000000  00010bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   00000245  00000000  00000000  00010c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    0000066b  00000000  00000000  00010e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      00000033  00000000  00000000  000114da  2**0
                  CONTENTS, READONLY
 10 .ARM.attributes 0000002d  00000000  00000000  0001150d  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000000a0  00000000  00000000  0001153c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 uart.c
08000150 g     F .text	0000005c copy_data
00000000 g       *ABS*	00000000 __data_size
08000300 g       .text	00000000 _sidata
08000300 g       .text	00000000 _etext
20000000 g       .bss	00000000 _sbss
00000000 g       *ABS*	00000000 __bss_size
20000000 g       .data	00000000 _sdata
20000000 g       .bss	00000000 _ebss
08000000 g     O .text	00000150 vector_table
080001d8 g     F .text	00000128 main
00000300 g       *ABS*	00000000 __text_size
20000000 g       .data	00000000 _edata
080001ac g     F .text	0000002c set_system_clock_to_8Mhz



Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 50 00 20 d9 01 00 08 00 00 00 00 00 00 00 00     .P. ............
	...

08000150 <copy_data>:

/*************************************************
* Copy the data contents from LMA to VMA
*************************************************/
void copy_data(void)
{
 8000150:	b082      	sub	sp, #8
	extern char _etext, _sdata, _edata, _sbss, _ebss;
	char *src = &_etext;
 8000152:	4b11      	ldr	r3, [pc, #68]	; (8000198 <copy_data+0x48>)
 8000154:	9301      	str	r3, [sp, #4]
	char *dst = &_sdata;
 8000156:	4b11      	ldr	r3, [pc, #68]	; (800019c <copy_data+0x4c>)
 8000158:	9300      	str	r3, [sp, #0]

	/* ROM has data at end of text; copy it.  */
	while (dst < &_edata)
 800015a:	e007      	b.n	800016c <copy_data+0x1c>
		*dst++ = *src++;
 800015c:	9a01      	ldr	r2, [sp, #4]
 800015e:	1c53      	adds	r3, r2, #1
 8000160:	9301      	str	r3, [sp, #4]
 8000162:	9b00      	ldr	r3, [sp, #0]
 8000164:	1c59      	adds	r1, r3, #1
 8000166:	9100      	str	r1, [sp, #0]
 8000168:	7812      	ldrb	r2, [r2, #0]
 800016a:	701a      	strb	r2, [r3, #0]
	while (dst < &_edata)
 800016c:	9b00      	ldr	r3, [sp, #0]
 800016e:	4a0c      	ldr	r2, [pc, #48]	; (80001a0 <copy_data+0x50>)
 8000170:	4293      	cmp	r3, r2
 8000172:	d3f3      	bcc.n	800015c <copy_data+0xc>

	/* Zero bss.  */
	for (dst = &_sbss; dst< &_ebss; dst++)
 8000174:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <copy_data+0x54>)
 8000176:	9300      	str	r3, [sp, #0]
 8000178:	e005      	b.n	8000186 <copy_data+0x36>
		*dst = 0;
 800017a:	9b00      	ldr	r3, [sp, #0]
 800017c:	2200      	movs	r2, #0
 800017e:	701a      	strb	r2, [r3, #0]
	for (dst = &_sbss; dst< &_ebss; dst++)
 8000180:	9b00      	ldr	r3, [sp, #0]
 8000182:	3301      	adds	r3, #1
 8000184:	9300      	str	r3, [sp, #0]
 8000186:	9b00      	ldr	r3, [sp, #0]
 8000188:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <copy_data+0x58>)
 800018a:	4293      	cmp	r3, r2
 800018c:	d3f5      	bcc.n	800017a <copy_data+0x2a>
}
 800018e:	bf00      	nop
 8000190:	bf00      	nop
 8000192:	b002      	add	sp, #8
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	08000300 	.word	0x08000300
 800019c:	20000000 	.word	0x20000000
 80001a0:	20000000 	.word	0x20000000
 80001a4:	20000000 	.word	0x20000000
 80001a8:	20000000 	.word	0x20000000

080001ac <set_system_clock_to_8Mhz>:


void set_system_clock_to_8Mhz(void)
{
	// Enable HSI
	RCC->CR |= 1;
 80001ac:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <set_system_clock_to_8Mhz+0x28>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a08      	ldr	r2, [pc, #32]	; (80001d4 <set_system_clock_to_8Mhz+0x28>)
 80001b2:	f043 0301 	orr.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]
	// Wait untill HSI settles down
	while (!(RCC->CR & (1 << 1)));
 80001b8:	bf00      	nop
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <set_system_clock_to_8Mhz+0x28>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f003 0302 	and.w	r3, r3, #2
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d0f9      	beq.n	80001ba <set_system_clock_to_8Mhz+0xe>
	
	// Finally, choose HSI as the system clock
	RCC->CFGR |= (0b00 << 0);
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <set_system_clock_to_8Mhz+0x28>)
 80001c8:	4a02      	ldr	r2, [pc, #8]	; (80001d4 <set_system_clock_to_8Mhz+0x28>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	6053      	str	r3, [r2, #4]

}
 80001ce:	bf00      	nop
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	40021000 	.word	0x40021000

080001d8 <main>:

/*************************************************
* Main code starts from here
*************************************************/
int32_t main(void)
{
 80001d8:	b500      	push	{lr}
 80001da:	b087      	sub	sp, #28
	// Copy LMA to VMA for data section
	copy_data();
 80001dc:	f7ff ffb8 	bl	8000150 <copy_data>

	// Set clock to 8 MHz
	set_system_clock_to_8Mhz();
 80001e0:	f7ff ffe4 	bl	80001ac <set_system_clock_to_8Mhz>

	uint32_t i = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	9305      	str	r3, [sp, #20]
	// Enable alternate function clock. Bit 0 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 0);
 80001e8:	4b41      	ldr	r3, [pc, #260]	; (80002f0 <main+0x118>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a40      	ldr	r2, [pc, #256]	; (80002f0 <main+0x118>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6193      	str	r3, [r2, #24]
	// Enable GPIOA clock. Bit 2 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 2);
 80001f4:	4b3e      	ldr	r3, [pc, #248]	; (80002f0 <main+0x118>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a3d      	ldr	r2, [pc, #244]	; (80002f0 <main+0x118>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
	// Enable clock for UART1 clock. Bit 14 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 14);
 8000200:	4b3b      	ldr	r3, [pc, #236]	; (80002f0 <main+0x118>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a3a      	ldr	r2, [pc, #232]	; (80002f0 <main+0x118>)
 8000206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800020a:	6193      	str	r3, [r2, #24]

	// Make GPIOA Pin 9,10 (PA9, PA10) alternate-function output (0b1010)
	GPIOA->CRH &= 0xFFFFF00F;
 800020c:	4b39      	ldr	r3, [pc, #228]	; (80002f4 <main+0x11c>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	4a38      	ldr	r2, [pc, #224]	; (80002f4 <main+0x11c>)
 8000212:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000216:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000BB0;
 8000218:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <main+0x11c>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a35      	ldr	r2, [pc, #212]	; (80002f4 <main+0x11c>)
 800021e:	f443 633b 	orr.w	r3, r3, #2992	; 0xbb0
 8000222:	6053      	str	r3, [r2, #4]

	// Enable USART
	USART1->CR1 |= (1 << 13);
 8000224:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <main+0x120>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a33      	ldr	r2, [pc, #204]	; (80002f8 <main+0x120>)
 800022a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800022e:	60d3      	str	r3, [r2, #12]
	// Word length - leave default (8 data)
	USART1->CR1 |= (0 << 12);
 8000230:	4b31      	ldr	r3, [pc, #196]	; (80002f8 <main+0x120>)
 8000232:	4a31      	ldr	r2, [pc, #196]	; (80002f8 <main+0x120>)
 8000234:	68db      	ldr	r3, [r3, #12]
 8000236:	60d3      	str	r3, [r2, #12]
	// Number of stop bits - leave default (1 stop)
	USART1->CR2 |= (0b00 << 12);
 8000238:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <main+0x120>)
 800023a:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <main+0x120>)
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	6113      	str	r3, [r2, #16]
	// Baud rate
	// BRR should be 52 + 1/12 for 9600 baud rate
	// Thus manista is 52 (0x034) and fraction is 12 (0x1) (1/16)
	// Making it 0x0341
	USART1->BRR = 0x0341;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <main+0x120>)
 8000242:	f240 3241 	movw	r2, #833	; 0x341
 8000246:	609a      	str	r2, [r3, #8]
	// Transmitter enable
	USART1->CR1 |= (1 << 3);
 8000248:	4b2b      	ldr	r3, [pc, #172]	; (80002f8 <main+0x120>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4a2a      	ldr	r2, [pc, #168]	; (80002f8 <main+0x120>)
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	60d3      	str	r3, [r2, #12]
	// Receiver enable
	USART1->CR1 |= (1 << 2);
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <main+0x120>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a27      	ldr	r2, [pc, #156]	; (80002f8 <main+0x120>)
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	60d3      	str	r3, [r2, #12]

	volatile uint32_t *addr = (uint32_t*) 0x08000000; 
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	9304      	str	r3, [sp, #16]
	uint32_t value = *addr;
 8000266:	9b04      	ldr	r3, [sp, #16]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	9303      	str	r3, [sp, #12]
	uint8_t value_8bit;
	
	// for some reason, when nrst is pressed, the first byte does not get transmitted
	// therefore, this is a placeholder to make sure that data does not get lost during testing
	// Might remove this later if needed
	value_8bit = (value>>24);
 800026c:	9b03      	ldr	r3, [sp, #12]
 800026e:	0e1b      	lsrs	r3, r3, #24
 8000270:	f88d 3007 	strb.w	r3, [sp, #7]
	USART1->DR |= value_8bit;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <main+0x120>)
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800027c:	491e      	ldr	r1, [pc, #120]	; (80002f8 <main+0x120>)
 800027e:	4313      	orrs	r3, r2
 8000280:	604b      	str	r3, [r1, #4]
	while(!(USART1->SR & (1 << 6)));
 8000282:	bf00      	nop
 8000284:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <main+0x120>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800028c:	2b00      	cmp	r3, #0
 800028e:	d0f9      	beq.n	8000284 <main+0xac>
	
	while(1)
	{
		
		for (int i = 4; i > 0; i--){
 8000290:	2304      	movs	r3, #4
 8000292:	9302      	str	r3, [sp, #8]
 8000294:	e018      	b.n	80002c8 <main+0xf0>
			value_8bit = (value >> (8*(i-1)) );
 8000296:	9b02      	ldr	r3, [sp, #8]
 8000298:	3b01      	subs	r3, #1
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	9a03      	ldr	r2, [sp, #12]
 800029e:	fa22 f303 	lsr.w	r3, r2, r3
 80002a2:	f88d 3007 	strb.w	r3, [sp, #7]
			USART1->DR |= value_8bit;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <main+0x120>)
 80002a8:	685a      	ldr	r2, [r3, #4]
 80002aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <main+0x120>)
 80002b0:	4313      	orrs	r3, r2
 80002b2:	604b      	str	r3, [r1, #4]
			while(!(USART1->SR & (1 << 6)));
 80002b4:	bf00      	nop
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <main+0x120>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <main+0xde>
		for (int i = 4; i > 0; i--){
 80002c2:	9b02      	ldr	r3, [sp, #8]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	9302      	str	r3, [sp, #8]
 80002c8:	9b02      	ldr	r3, [sp, #8]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	dce3      	bgt.n	8000296 <main+0xbe>
		}
		
		addr = addr + 1;
 80002ce:	9b04      	ldr	r3, [sp, #16]
 80002d0:	3304      	adds	r3, #4
 80002d2:	9304      	str	r3, [sp, #16]
		value = *addr;
 80002d4:	9b04      	ldr	r3, [sp, #16]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	9303      	str	r3, [sp, #12]
		
		for(i=1000000; i>0; i--);
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <main+0x124>)
 80002dc:	9305      	str	r3, [sp, #20]
 80002de:	e002      	b.n	80002e6 <main+0x10e>
 80002e0:	9b05      	ldr	r3, [sp, #20]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	9305      	str	r3, [sp, #20]
 80002e6:	9b05      	ldr	r3, [sp, #20]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f9      	bne.n	80002e0 <main+0x108>
		for (int i = 4; i > 0; i--){
 80002ec:	e7d0      	b.n	8000290 <main+0xb8>
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40013800 	.word	0x40013800
 80002fc:	000f4240 	.word	0x000f4240
